name: Build and Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number (e.g., 0.1.0)'
        required: true
        default: '0.1.0'

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Extract version from tag
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
          fi

      - name: Install ImageMagick
        run: sudo apt-get update && sudo apt-get install -y imagemagick
      
      - name: Make icon setup executable
        run: chmod +x setup-icon.sh

      - name: Make build script executable
        run: chmod +x build-packages.sh

      - name: Setup icons
        run: ./setup-icon.sh        
      
      - name: Build AppImage
        run: |
          VERSION=${{ steps.version.outputs.VERSION }} ./build-packages.sh appimage
      
      - name: Build Flatpak package
        run: |
          VERSION=${{ steps.version.outputs.VERSION }} ./build-packages.sh flatpak
      
      - name: List generated packages
        run: |
          echo "üì¶ Generated packages:"
          ls -lh dist/
      
      - name: Calculate checksums
        run: |
          cd dist
          sha256sum * > SHA256SUMS
          cat SHA256SUMS
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: multiwall-packages-${{ steps.version.outputs.VERSION }}
          path: |
            dist/*.AppImage
            dist/*.flatpak
            dist/SHA256SUMS
          retention-days: 30
      
      - name: Create Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          files: |
            dist/*.AppImage
            dist/*.flatpak
            dist/SHA256SUMS
          body: |
            # MultiWall v${{ steps.version.outputs.VERSION }}
            
            ## üì¶ Installation
            
            ### AppImage (Universal Linux)
            ```bash
            chmod +x MultiWall-${{ steps.version.outputs.VERSION }}-x86_64.AppImage
            ./MultiWall-${{ steps.version.outputs.VERSION }}-x86_64.AppImage
            ```
            
            ### Flatpak (.flatpak)
            ```bash
            flatpak install --user ./MultiWall-${{ steps.version.outputs.VERSION }}-x86_64.flatpak
            flatpak run com.latinosoft.MultiWall
            ```
            
            ## üîê Verify checksums
            ```bash
            sha256sum -c SHA256SUMS
            ```
            
            ## üìù Changelog
            See [CHANGELOG.md](CHANGELOG.md) for details.
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  
  test-packages:
    needs: build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        ubuntu-version: ['22.04', '24.04']
    
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: multiwall-packages-${{ needs.build.outputs.version }}
      
      - name: Test Flatpak
        run: |
          sudo apt update
          flatpak install --user ./MultiWall_*.flatpak || true
          
          # Verificar que el comando existe
          if flatpak info com.latinosoft.MultiWall &> /dev/null; then
            echo "‚úÖ Aplicaci√≥n MultiWall (Flatpak) est√° instalada"
          else
            echo "‚ùå Aplicaci√≥n MultiWall (Flatpak) no encontrada"
            exit 1
          fi
      
      - name: Test AppImage
        run: |
          chmod +x MultiWall-*.AppImage
          
          # Verificar que el AppImage es ejecutable
          if ./MultiWall-*.AppImage --appimage-help &> /dev/null; then
            echo "‚úÖ AppImage is valid"
          else
            echo "‚ö†Ô∏è AppImage check returned non-zero (might be expected)"
          fi